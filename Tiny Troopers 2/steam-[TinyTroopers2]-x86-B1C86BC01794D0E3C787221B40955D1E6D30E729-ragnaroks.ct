<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"#1 获取命令点数地址"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">//CommandPoints:GetCommandPoints
{$STRICT}
[ENABLE]
{$LUA}
local failedString = 'define(cheat1_entry,0)\nregisterSymbol(cheat1_entry)\nunregistersymbol(*)';
if syntaxcheck then return failedString end;
if LaunchMonoDataCollector() == 0 then return failedString end;
local classId = mono_findClass('Assembly-CSharp','CommandPoints');
if classId == 0 then return failedString end;
local methodId = mono_class_findMethod(classId,'GetCommandPoints');
if methodId == 0 then return failedString end;
local addressId = mono_compile_method(methodId);
if addressId == 0 then return failedString end;
local byte1,byte2 = readBytes(addressId+0x28,2,false);
if byte1 ~= 0x8B or byte2 ~= 0x05 then return failedString end;
--registerSymbol('cheat1_entry',addressId,false);
return string.format('define(cheat1_entry,%x)\nregistersymbol(cheat1_entry)',addressId);
{$ASM}
assert(cheat1_entry,55)
alloc(cheat1_code,4)
registersymbol(cheat1_code)

cheat1_code:
  readmem(cheat1_entry+2A,4)

[DISABLE]
unregistersymbol(*)
dealloc(*)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"注入方法地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat1_entry</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"战役模式"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>cheat1_code</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"训练模式"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>cheat1_code</Address>
          <Offsets>
            <Offset>4</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"#2 敌人无法攻击"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">//CharacterEnemy:CheckShootingDistance
{$STRICT}
[ENABLE]
{$LUA}
local failedString = 'define(cheat2_entry,0)\nregisterSymbol(cheat2_entry)\nunregistersymbol(*)';
if syntaxcheck then return failedString end;
if LaunchMonoDataCollector() == 0 then return failedString end;
local classId = mono_findClass('Assembly-CSharp','CharacterEnemy');
if classId == 0 then return failedString end;
local methodId = mono_class_findMethod(classId,'CheckShootingDistance');
if methodId == 0 then return failedString end;
local addressId = mono_compile_method(methodId);
if addressId == 0 then return failedString end;
local byte1,byte2,byte3 = readBytes(addressId+0x06,3,false);
if byte1 ~= 0xD9 or byte2 ~= 0x45 or byte3 ~= 0x0C then return failedString end;
--local byte1,byte2 = readBytes(addressId+0x27,2,false);
--if byte1 ~= 0x33 or byte2 ~= 0xC0 then return failedString end;
--registerSymbol('cheat2_entry',addressId,false);
return string.format('define(cheat2_entry,%x)\nregistersymbol(cheat2_entry)',addressId);
{$ASM}
assert(cheat2_entry,55)

cheat2_entry+06:
  DB EB 1F 90

[DISABLE]
cheat2_entry+06:
  DB D9 45 0C

unregistersymbol(*)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>7</ID>
          <Description>"注入方法地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat2_entry</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"#3 士兵无敌"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">//CharacterSoldier:HitCharacter
{$STRICT}
[ENABLE]
{$LUA}
local failedString = 'define(cheat3_entry,0)\nregisterSymbol(cheat3_entry)\nunregistersymbol(*)';
if syntaxcheck then return failedString end;
if LaunchMonoDataCollector() == 0 then return failedString end;
local classId = mono_findClass('Assembly-CSharp','CharacterSoldier');
if classId == 0 then return failedString end;
local methodId = mono_class_findMethod(classId,'HitCharacter');
if methodId == 0 then return failedString end;
local addressId = mono_compile_method(methodId);
if addressId == 0 then return failedString end;
return string.format('define(cheat3_entry,%x)\nregistersymbol(cheat3_entry)',addressId);
{$ASM}
assert(cheat3_entry,55)

cheat3_entry:
  DB C3

[DISABLE]
cheat3_entry:
  DB 55

unregistersymbol(*)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>11</ID>
          <Description>"注入方法地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat3_entry</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>12</ID>
      <Description>"#4 平民无敌"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">//CharacterCivilian:HitCharacter
{$STRICT}
[ENABLE]
{$LUA}
local failedString = 'define(cheat4_entry,0)\nregisterSymbol(cheat4_entry)\nunregistersymbol(*)';
if syntaxcheck then return failedString end;
if LaunchMonoDataCollector() == 0 then return failedString end;
local classId = mono_findClass('Assembly-CSharp','CharacterCivilian');
if classId == 0 then return failedString end;
local methodId = mono_class_findMethod(classId,'HitCharacter');
if methodId == 0 then return failedString end;
local addressId = mono_compile_method(methodId);
if addressId == 0 then return failedString end;
return string.format('define(cheat4_entry,%x)\nregistersymbol(cheat4_entry)',addressId);
{$ASM}
assert(cheat4_entry,55)

cheat4_entry:
  DB C3

[DISABLE]
cheat4_entry:
  DB 55

unregistersymbol(*)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>13</ID>
          <Description>"注入方法地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat4_entry</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"#5 士兵车辆无敌"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">//SoldierTechnical:HitVehicle
{$STRICT}
[ENABLE]
{$LUA}
local failedString = 'define(cheat5_entry,0)\nregisterSymbol(cheat5_entry)\nunregistersymbol(*)';
if syntaxcheck then return failedString end;
if LaunchMonoDataCollector() == 0 then return failedString end;
local classId = mono_findClass('Assembly-CSharp','SoldierTechnical');
if classId == 0 then return failedString end;
local methodId = mono_class_findMethod(classId,'HitVehicle');
if methodId == 0 then return failedString end;
local addressId = mono_compile_method(methodId);
if addressId == 0 then return failedString end;
return string.format('define(cheat5_entry,%x)\nregistersymbol(cheat5_entry)',addressId);
{$ASM}
assert(cheat5_entry,55)

cheat5_entry:
  DB C3

[DISABLE]
cheat5_entry:
  DB 55

unregistersymbol(*)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>15</ID>
          <Description>"注入方法地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat5_entry</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"#6 道具 9 个"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">//PlayerInventory:GetAmount
{$STRICT}
[ENABLE]
{$LUA}
local failedString = 'define(cheat6_entry,0)\nregisterSymbol(cheat6_entry)\nunregistersymbol(*)';
if syntaxcheck then return failedString end;
if LaunchMonoDataCollector() == 0 then return failedString end;
local classId = mono_findClass('Assembly-CSharp','PlayerInventory');
if classId == 0 then return failedString end;
local methodId = mono_class_findMethod(classId,'GetAmount');
if methodId == 0 then return failedString end;
local addressId = mono_compile_method(methodId);
if addressId == 0 then return failedString end;
local byte1,byte2,byte3,byte4,byte5 = readBytes(addressId+0x1F,5,false);
if byte1 ~= 0x39 or byte2 ~= 0x09 or byte3 ~= 0x8B or byte4 ~= 0x40 or byte5 ~= 0x1C then return failedString end;
return string.format('define(cheat6_entry,%x)\nregistersymbol(cheat6_entry)',addressId);
{$ASM}
assert(cheat6_entry,55)
alloc(cheat6_code,32,cheat6_entry)
registersymbol(cheat6_code)
label(returnhere)

cheat6_code:
  cmp [ecx],ecx
  mov [eax+1C],09
  mov eax,[eax+1C]
  jmp returnhere

cheat6_entry+1F:
  jmp cheat6_code
returnhere:

[DISABLE]
cheat6_entry+1F:
  DB 39 09 8B 40 1C

unregistersymbol(*)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>17</ID>
          <Description>"注入方法地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat6_entry</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"注入代码地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat6_code</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"#7 限时 180 秒"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">//LevelEndCheck:FixedUpdate
{$STRICT}
[ENABLE]
{$LUA}
local failedString = 'define(cheat7_entry,0)\nregisterSymbol(cheat7_entry)\nunregistersymbol(*)';
if syntaxcheck then return failedString end;
if LaunchMonoDataCollector() == 0 then return failedString end;
local classId = mono_findClass('Assembly-CSharp','LevelEndCheck');
if classId == 0 then return failedString end;
local methodId = mono_class_findMethod(classId,'FixedUpdate');
if methodId == 0 then return failedString end;
local addressId = mono_compile_method(methodId);
if addressId == 0 then return failedString end;
local byte1,byte2,byte3,byte4,byte5,byte6 = readBytes(addressId+0x17A,6,false);
if byte1 ~= 0xD9 or byte2 ~= 0x87 or byte3 ~= 0xD8 or byte4 ~= 0x00 or byte5 ~= 0x00 or byte6 ~= 0x00 then return failedString end;
return string.format('define(cheat7_entry,%x)\nregistersymbol(cheat7_entry)',addressId);
{$ASM}
assert(cheat7_entry,55)
alloc(cheat7_code,32,cheat7_entry)
registersymbol(cheat7_code)
label(returnhere)

cheat7_code:
  mov [edi+D8],43340000
  fld DWORD PTR [edi+D8]
  jmp returnhere

cheat7_entry+17A:
  jmp cheat7_code
  nop
returnhere:

[DISABLE]
cheat7_entry+17A:
  DB D9 87 D8 00 00 00

unregistersymbol(*)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>21</ID>
          <Description>"注入方法地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat7_entry</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>22</ID>
          <Description>"注入代码地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat7_code</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>

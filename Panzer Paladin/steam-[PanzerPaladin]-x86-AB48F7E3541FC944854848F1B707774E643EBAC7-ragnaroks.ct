<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"#1 武器耐久不减"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Paris.Game.Combat.Weapon::ApplyDurabilityLoss
{$STRICT}
[ENABLE]
{$LUA}
local defined = [[
define(cheat1_entry,0)
define(cheat1_target1,0)
]];
if syntaxcheck then return defined end;
if LaunchDotNetInterface() == false then return defined end;
local dataCollector = getDotNetDataCollector();
if dataCollector == nil then return defined end;
local domainList = dataCollector.enumDomains();
if #domainList&lt;1 then return defined end;
local domainHandle = 0;
for i1=1,#domainList,1 do
--这里对比的是可执行文件名，也就是 dotnet 的主域
  if domainList[i1]['Name'] == 'PanzerPaladin.exe' then
    domainHandle = domainList[i1]['DomainHandle'];
  end;
end;
if domainHandle == 0 then return defined end;
local moduleList = dataCollector.enumModuleList(domainHandle);
if #moduleList&lt;1 then return defined end;
local moduleHandle = 0;
local moduleId = 0;
for i1=1,#moduleList,1 do
--这里对比的是 assembly-namespace，只是 dotnet 默认恰好与可执行文件名一致
  if extractFileName(moduleList[i1]['Name']) == 'PanzerPaladin.exe' then
    moduleHandle = moduleList[i1]['ModuleHandle'];
    moduleId = i1;
  end;
end;
if moduleHandle == 0 then return defined end;
if moduleId == 0 then return defined end;
local classList = dataCollector.enumTypeDefs(moduleHandle);
if #classList&lt;1 then return defined end;
local classTypeDefToken = 0;
for i1=1,#classList,1 do
--这里对比的是 class-namespace
  if classList[i1]['Name'] == 'Paris.Game.Combat.Weapon' then
    classTypeDefToken = classList[i1]['TypeDefToken'];
  end;
end;
if classTypeDefToken == 0 then return defined end;
local methodList = dataCollector.getTypeDefMethods(moduleHandle,classTypeDefToken);
if #methodList&lt;1 then return defined end;
local methodToken = 0;
for i1=1,#methodList,1 do
--这里对比的是 method-name
  if methodList[i1]['Name'] == 'ApplyDurabilityLoss' then
    methodToken = methodList[i1]['MethodToken'];
  end;
end;
if methodToken == 0 then return defined end;
local methodEntryPoint = dotnet_getMethodEntryPoint(moduleId,methodToken);
if methodEntryPoint == 0 then return defined end;
local memoryScanner = createMemScan();
memoryScanner.setOnlyOneResult(true);
memoryScanner.firstScan(soExactValue,vtByteArray,rtTruncated,'33 C0 8D 65 F4 5B 5E 5F 5D C2 04 00',nil,methodEntryPoint,methodEntryPoint+48,'+X+W*C',fsmNotAligned,nil,true,true,false,false);
memoryScanner.waitTillDone();
local target1 = memoryScanner.Result;
memoryScanner.destroy();
if target1 == nil then return defined end;
return string.format([[
define(cheat1_entry,%x)
define(cheat1_target1,%x)
]],methodEntryPoint,target1);
{$ASM}
assert(cheat1_entry+09,8B F1)
registersymbol(cheat1_entry)

cheat1_entry+09:
  jmp short cheat1_target1

[DISABLE]
cheat1_entry+09:
  DB 8B F1

unregistersymbol(*)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"注入方法地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat1_entry</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"#2 生命值不减"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Paris.Game.Actor.Player::Hurt
{$STRICT}
[ENABLE]
{$LUA}
local defined = [[
define(cheat2_entry,0)
define(cheat2_target1,0)
]];
if syntaxcheck then return defined end;
if LaunchDotNetInterface() == false then return defined end;
local dataCollector = getDotNetDataCollector();
if dataCollector == nil then return defined end;
local domainList = dataCollector.enumDomains();
if #domainList&lt;1 then return defined end;
local domainHandle = 0;
for i1=1,#domainList,1 do
--这里对比的是可执行文件名，也就是 dotnet 的主域
  if domainList[i1]['Name'] == 'PanzerPaladin.exe' then
    domainHandle = domainList[i1]['DomainHandle'];
  end;
end;
if domainHandle == 0 then return defined end;
local moduleList = dataCollector.enumModuleList(domainHandle);
if #moduleList&lt;1 then return defined end;
local moduleHandle = 0;
local moduleId = 0;
for i1=1,#moduleList,1 do
--这里对比的是 assembly-namespace，只是 dotnet 默认恰好与可执行文件名一致
  if extractFileName(moduleList[i1]['Name']) == 'PanzerPaladin.exe' then
    moduleHandle = moduleList[i1]['ModuleHandle'];
    moduleId = i1;
  end;
end;
if moduleHandle == 0 then return defined end;
if moduleId == 0 then return defined end;
local classList = dataCollector.enumTypeDefs(moduleHandle);
if #classList&lt;1 then return defined end;
local classTypeDefToken = 0;
for i1=1,#classList,1 do
--这里对比的是 class-namespace
  if classList[i1]['Name'] == 'Paris.Game.Actor.Player' then
    classTypeDefToken = classList[i1]['TypeDefToken'];
  end;
end;
if classTypeDefToken == 0 then return defined end;
local methodList = dataCollector.getTypeDefMethods(moduleHandle,classTypeDefToken);
if #methodList&lt;1 then return defined end;
local methodToken = 0;
for i1=1,#methodList,1 do
--这里对比的是 method-name
  if methodList[i1]['Name'] == 'Hurt' then
    methodToken = methodList[i1]['MethodToken'];
  end;
end;
if methodToken == 0 then return defined end;
local methodEntryPoint = dotnet_getMethodEntryPoint(moduleId,methodToken);
if methodEntryPoint == 0 then return defined end;
local memoryScanner = createMemScan();
memoryScanner.setOnlyOneResult(true);
memoryScanner.firstScan(soExactValue,vtByteArray,rtTruncated,'8D 65 F4 5B 5E 5F 5D C3',nil,methodEntryPoint,methodEntryPoint+1024,'+X+W*C',fsmNotAligned,nil,true,true,false,false);
memoryScanner.waitTillDone();
local target1 = memoryScanner.Result;
memoryScanner.destroy();
if target1 == nil then return defined end;
return string.format([[
define(cheat2_entry,%x)
define(cheat2_target1,%x)
]],methodEntryPoint,target1);
{$ASM}
assert(cheat2_entry+09,33 C0 89 45 E8 89 45 EC)
registersymbol(cheat2_entry)

cheat2_entry+0B:
  jmp cheat2_target1
  nop

[DISABLE]
cheat2_entry+0B:
  DB 89 45 E8 89 45 EC

unregistersymbol(*)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"注入方法地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat2_entry</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>01BA04D8</Address>
      <Comment>push ebp
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>

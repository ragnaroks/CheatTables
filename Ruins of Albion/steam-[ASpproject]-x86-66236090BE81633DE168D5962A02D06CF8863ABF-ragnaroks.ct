<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"#1 生命值不减"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">//HealthPointController:LoseHealth
{$STRICT}
[ENABLE]
{$LUA}
local failedString = 'define(cheat1_entry,0)\nregistersymbol(cheat1_entry)\nunregistersymbol(*)';
if syntaxcheck then return failedString end;
if LaunchMonoDataCollector() == 0 then return failedString end;
local classId = mono_findClass('Assembly-CSharp','HealthPointController');
if classId == 0 then return failedString end;
local methodId = mono_class_findMethod(classId,'LoseHealth');
if methodId == 0 then return failedString end;
local addressId = mono_compile_method(methodId);
if addressId == 0 then return failedString end;
--local byte1,byte2 = readBytes(addressId+0xF7,2,false);
--if byte1 ~= 0xFF or byte2 ~= 0xC8 then return failedString end;
return string.format('define(cheat1_entry,%x)\nregistersymbol(cheat1_entry)',addressId);
{$ASM}
assert(cheat1_entry,55)

cheat1_entry:
  DB C3

[DISABLE]
cheat1_entry:
  DB 55

unregistersymbol(*)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"注入方法地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat1_entry</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"#2 远程攻击次数不减"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">//PlayerAbilityShot_Basic:ShootAbility
{$STRICT}
[ENABLE]
{$LUA}
local failedString = 'define(cheat2_entry,0)\nregistersymbol(cheat2_entry)\nunregistersymbol(*)';
if syntaxcheck then return failedString end;
if LaunchMonoDataCollector() == 0 then return failedString end;
local classId = mono_findClass('Assembly-CSharp','PlayerAbilityShot_Basic');
if classId == 0 then return failedString end;
local methodId = mono_class_findMethod(classId,'ShootAbility');
if methodId == 0 then return failedString end;
local addressId = mono_compile_method(methodId);
if addressId == 0 then return failedString end;
local byte1 = readBytes(addressId+0xDA,1,false);
if byte1 ~= 0x49 then return failedString end;
return string.format('define(cheat2_entry,%x)\nregistersymbol(cheat2_entry)',addressId);
{$ASM}
assert(cheat2_entry,55)

cheat2_entry+DA:
  nop

[DISABLE]
cheat2_entry+DA:
  DB 49

unregistersymbol(*)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>4</ID>
          <Description>"注入方法地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat2_entry</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"#3 能量值不减"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">//HealthPointController:SpendEnergy
{$STRICT}
[ENABLE]
{$LUA}
local failedString = 'define(cheat3_entry,0)\nregistersymbol(cheat3_entry)\nunregistersymbol(*)';
if syntaxcheck then return failedString end;
if LaunchMonoDataCollector() == 0 then return failedString end;
local classId = mono_findClass('Assembly-CSharp','HealthPointController');
if classId == 0 then return failedString end;
local methodId = mono_class_findMethod(classId,'SpendEnergy');
if methodId == 0 then return failedString end;
local addressId = mono_compile_method(methodId);
if addressId == 0 then return failedString end;
local byte1,byte2 = readBytes(addressId+0x11,2,false);
if byte1 ~= 0x2B or byte2 ~= 0xC7 then return failedString end;
return string.format('define(cheat3_entry,%x)\nregistersymbol(cheat3_entry)',addressId);
{$ASM}
assert(cheat3_entry,55)

cheat3_entry+11:
  nop 2

[DISABLE]
cheat3_entry+11:
  DB 2B C7

unregistersymbol(*)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>10</ID>
          <Description>"注入方法地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat3_entry</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"#4 一击必杀"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">//EnemyScript:TakeDamage
{$STRICT}
[ENABLE]
{$LUA}
local failedString = 'define(cheat4_entry,0)\nregistersymbol(cheat4_entry)\nunregistersymbol(*)';
if syntaxcheck then return failedString end;
if LaunchMonoDataCollector() == 0 then return failedString end;
local classId = mono_findClass('Assembly-CSharp','EnemyScript');
if classId == 0 then return failedString end;
local methodId = mono_class_findMethod(classId,'TakeDamage');
if methodId == 0 then return failedString end;
local addressId = mono_compile_method(methodId);
if addressId == 0 then return failedString end;
local byte1,byte2 = readBytes(addressId+0x1E,2,false);
if byte1 ~= 0x29 or byte2 ~= 0xC8 then return failedString end;
return string.format('define(cheat4_entry,%x)\nregistersymbol(cheat4_entry)',addressId);
{$ASM}
assert(cheat4_entry,55)

cheat4_entry+1E:
  xor eax,eax

[DISABLE]
cheat4_entry+1E:
  DB 29 C8

unregistersymbol(*)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>7</ID>
          <Description>"注入方法地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat4_entry</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"#5 购买物品金钱不减"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">//ShopUiManager:BuySelection
{$STRICT}
[ENABLE]
{$LUA}
local failedString = 'define(cheat5_entry,0)\nregistersymbol(cheat5_entry)\nunregistersymbol(*)';
if syntaxcheck then return failedString end;
if LaunchMonoDataCollector() == 0 then return failedString end;
local classId = mono_findClass('Assembly-CSharp','ShopUiManager');
if classId == 0 then return failedString end;
local methodId = mono_class_findMethod(classId,'BuySelection');
if methodId == 0 then return failedString end;
local addressId = mono_compile_method(methodId);
if addressId == 0 then return failedString end;
local byte1,byte2,byte3 = readBytes(addressId+0x88,3,false);
if byte1 ~= 0x8D or byte2 ~= 0x6D or byte3 ~= 0x00 then return failedString end;
local byte1,byte2,byte3 = readBytes(addressId+0x90,3,false);
if byte1 ~= 0x8B or byte2 ~= 0x47 or byte3 ~= 0x18 then return failedString end;
return string.format('define(cheat5_entry,%x)\nregistersymbol(cheat5_entry)',addressId);
{$ASM}
assert(cheat5_entry,55)
alloc(cheat5_code,8,cheat5_entry)
registersymbol(cheat5_code)

cheat5_code:
  readmem(cheat5_entry+8B,5)

cheat5_entry+8B:
  nop 5

[DISABLE]
cheat5_entry+8B:
  readmem(cheat5_code,5)

unregistersymbol(*)
dealloc(*)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>12</ID>
          <Description>"注入方法地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat5_entry</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"注入代码地址"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>cheat5_code</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>
